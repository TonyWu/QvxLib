// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.38967
//    <NameSpace>QvxLib</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>False</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>False</GenerateXMLAttributes><EnableEncoding>False</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace QvxLib
{
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Collections.Generic;


    public partial class QvxTableHeader
    {

        private int majorVersionField;

        private int minorVersionField;

        private System.DateTime createUtcTimeField;

        private bool createUtcTimeFieldSpecified;

        private string tableNameField;

        private bool usesSeparatorByteField;

        private bool usesSeparatorByteFieldSpecified;

        private int blockSizeField;

        private bool blockSizeFieldSpecified;

        private List<QvxTableHeaderQvxFieldHeader> fieldsField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public QvxTableHeader()
        {
            this.fieldsField = new List<QvxTableHeaderQvxFieldHeader>();
        }

        public int MajorVersion
        {
            get
            {
                return this.majorVersionField;
            }
            set
            {
                this.majorVersionField = value;
            }
        }

        public int MinorVersion
        {
            get
            {
                return this.minorVersionField;
            }
            set
            {
                this.minorVersionField = value;
            }
        }

        public System.DateTime CreateUtcTime
        {
            get
            {
                return this.createUtcTimeField;
            }
            set
            {
                this.createUtcTimeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreateUtcTimeSpecified
        {
            get
            {
                return this.createUtcTimeFieldSpecified;
            }
            set
            {
                this.createUtcTimeFieldSpecified = value;
            }
        }

        public string TableName
        {
            get
            {
                return this.tableNameField;
            }
            set
            {
                this.tableNameField = value;
            }
        }

        public bool UsesSeparatorByte
        {
            get
            {
                return this.usesSeparatorByteField;
            }
            set
            {
                this.usesSeparatorByteField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UsesSeparatorByteSpecified
        {
            get
            {
                return this.usesSeparatorByteFieldSpecified;
            }
            set
            {
                this.usesSeparatorByteFieldSpecified = value;
            }
        }

        public int BlockSize
        {
            get
            {
                return this.blockSizeField;
            }
            set
            {
                this.blockSizeField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BlockSizeSpecified
        {
            get
            {
                return this.blockSizeFieldSpecified;
            }
            set
            {
                this.blockSizeFieldSpecified = value;
            }
        }

        [System.Xml.Serialization.XmlArrayAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        [System.Xml.Serialization.XmlArrayItemAttribute("QvxFieldHeader", Form = System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable = false)]
        public List<QvxTableHeaderQvxFieldHeader> Fields
        {
            get
            {
                return this.fieldsField;
            }
            set
            {
                this.fieldsField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(QvxTableHeader));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current QvxTableHeader object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an QvxTableHeader object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output QvxTableHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out QvxTableHeader obj, out System.Exception exception)
        {
            exception = null;
            obj = default(QvxTableHeader);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out QvxTableHeader obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static QvxTableHeader Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((QvxTableHeader)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current QvxTableHeader object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an QvxTableHeader object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output QvxTableHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out QvxTableHeader obj, out System.Exception exception)
        {
            exception = null;
            obj = default(QvxTableHeader);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out QvxTableHeader obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static QvxTableHeader LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public partial class QvxTableHeaderQvxFieldHeader
    {

        private string fieldNameField;

        private QvxFieldType typeField;

        private QvxFieldExtent extentField;

        private QvxNullRepresentation nullRepresentationField;

        private bool bigEndianField;

        private bool bigEndianFieldSpecified;

        private int codePageField;

        private bool codePageFieldSpecified;

        private int byteWidthField;

        private bool byteWidthFieldSpecified;

        private int fixPointDecimalsField;

        private bool fixPointDecimalsFieldSpecified;

        private FieldAttributes fieldFormatField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public QvxTableHeaderQvxFieldHeader()
        {
            this.fieldFormatField = new FieldAttributes();
        }

        public string FieldName
        {
            get
            {
                return this.fieldNameField;
            }
            set
            {
                this.fieldNameField = value;
            }
        }

        public QvxFieldType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        public QvxFieldExtent Extent
        {
            get
            {
                return this.extentField;
            }
            set
            {
                this.extentField = value;
            }
        }

        public QvxNullRepresentation NullRepresentation
        {
            get
            {
                return this.nullRepresentationField;
            }
            set
            {
                this.nullRepresentationField = value;
            }
        }

        public bool BigEndian
        {
            get
            {
                return this.bigEndianField;
            }
            set
            {
                this.bigEndianField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool BigEndianSpecified
        {
            get
            {
                return this.bigEndianFieldSpecified;
            }
            set
            {
                this.bigEndianFieldSpecified = value;
            }
        }

        public int CodePage
        {
            get
            {
                return this.codePageField;
            }
            set
            {
                this.codePageField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CodePageSpecified
        {
            get
            {
                return this.codePageFieldSpecified;
            }
            set
            {
                this.codePageFieldSpecified = value;
            }
        }

        public int ByteWidth
        {
            get
            {
                return this.byteWidthField;
            }
            set
            {
                this.byteWidthField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ByteWidthSpecified
        {
            get
            {
                return this.byteWidthFieldSpecified;
            }
            set
            {
                this.byteWidthFieldSpecified = value;
            }
        }

        public int FixPointDecimals
        {
            get
            {
                return this.fixPointDecimalsField;
            }
            set
            {
                this.fixPointDecimalsField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool FixPointDecimalsSpecified
        {
            get
            {
                return this.fixPointDecimalsFieldSpecified;
            }
            set
            {
                this.fixPointDecimalsFieldSpecified = value;
            }
        }

        public FieldAttributes FieldFormat
        {
            get
            {
                return this.fieldFormatField;
            }
            set
            {
                this.fieldFormatField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(QvxTableHeaderQvxFieldHeader));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current QvxTableHeaderQvxFieldHeader object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an QvxTableHeaderQvxFieldHeader object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output QvxTableHeaderQvxFieldHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out QvxTableHeaderQvxFieldHeader obj, out System.Exception exception)
        {
            exception = null;
            obj = default(QvxTableHeaderQvxFieldHeader);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out QvxTableHeaderQvxFieldHeader obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static QvxTableHeaderQvxFieldHeader Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((QvxTableHeaderQvxFieldHeader)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current QvxTableHeaderQvxFieldHeader object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an QvxTableHeaderQvxFieldHeader object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output QvxTableHeaderQvxFieldHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out QvxTableHeaderQvxFieldHeader obj, out System.Exception exception)
        {
            exception = null;
            obj = default(QvxTableHeaderQvxFieldHeader);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out QvxTableHeaderQvxFieldHeader obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static QvxTableHeaderQvxFieldHeader LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public enum QvxFieldType
    {

        /// <remarks/>
        QVX_SIGNED_INTEGER,

        /// <remarks/>
        QVX_UNSIGNED_INTEGER,

        /// <remarks/>
        QVX_IEEE_REAL,

        /// <remarks/>
        QVX_PACKED_BCD,

        /// <remarks/>
        QVX_BLOB,

        /// <remarks/>
        QVX_TEXT,

        /// <remarks/>
        QVX_QV_DUAL,
    }

    public enum QvxFieldExtent
    {

        /// <remarks/>
        QVX_FIX,

        /// <remarks/>
        QVX_COUNTED,

        /// <remarks/>
        QVX_ZERO_TERMINATED,

        /// <remarks/>
        QVX_QV_SPECIAL,
    }

    public enum QvxNullRepresentation
    {

        /// <remarks/>
        QVX_NULL_NEVER,

        /// <remarks/>
        QVX_NULL_ZERO_LENGTH,

        /// <remarks/>
        QVX_NULL_FLAG_WITH_UNDEFINED_DATA,

        /// <remarks/>
        QVX_NULL_FLAG_SUPPRESS_DATA,
    }

    public partial class FieldAttributes
    {

        private FieldAttrType typeField;

        private int nDecField;

        private bool nDecFieldSpecified;

        private int useThouField;

        private bool useThouFieldSpecified;

        private string fmtField;

        private string decField;

        private string thouField;

        private static System.Xml.Serialization.XmlSerializer serializer;

        public FieldAttrType Type
        {
            get
            {
                return this.typeField;
            }
            set
            {
                this.typeField = value;
            }
        }

        public int nDec
        {
            get
            {
                return this.nDecField;
            }
            set
            {
                this.nDecField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nDecSpecified
        {
            get
            {
                return this.nDecFieldSpecified;
            }
            set
            {
                this.nDecFieldSpecified = value;
            }
        }

        public int UseThou
        {
            get
            {
                return this.useThouField;
            }
            set
            {
                this.useThouField = value;
            }
        }

        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UseThouSpecified
        {
            get
            {
                return this.useThouFieldSpecified;
            }
            set
            {
                this.useThouFieldSpecified = value;
            }
        }

        public string Fmt
        {
            get
            {
                return this.fmtField;
            }
            set
            {
                this.fmtField = value;
            }
        }

        public string Dec
        {
            get
            {
                return this.decField;
            }
            set
            {
                this.decField = value;
            }
        }

        public string Thou
        {
            get
            {
                return this.thouField;
            }
            set
            {
                this.thouField = value;
            }
        }

        private static System.Xml.Serialization.XmlSerializer Serializer
        {
            get
            {
                if ((serializer == null))
                {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FieldAttributes));
                }
                return serializer;
            }
        }

        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FieldAttributes object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize()
        {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try
            {
                memoryStream = new System.IO.MemoryStream();
                Serializer.Serialize(memoryStream, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally
            {
                if ((streamReader != null))
                {
                    streamReader.Dispose();
                }
                if ((memoryStream != null))
                {
                    memoryStream.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes workflow markup into an FieldAttributes object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FieldAttributes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FieldAttributes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FieldAttributes);
            try
            {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool Deserialize(string xml, out FieldAttributes obj)
        {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }

        public static FieldAttributes Deserialize(string xml)
        {
            System.IO.StringReader stringReader = null;
            try
            {
                stringReader = new System.IO.StringReader(xml);
                return ((FieldAttributes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally
            {
                if ((stringReader != null))
                {
                    stringReader.Dispose();
                }
            }
        }

        /// <summary>
        /// Serializes current FieldAttributes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, out System.Exception exception)
        {
            exception = null;
            try
            {
                SaveToFile(fileName);
                return true;
            }
            catch (System.Exception e)
            {
                exception = e;
                return false;
            }
        }

        public virtual void SaveToFile(string fileName)
        {
            System.IO.StreamWriter streamWriter = null;
            try
            {
                string xmlString = Serialize();
                System.IO.FileInfo xmlFile = new System.IO.FileInfo(fileName);
                streamWriter = xmlFile.CreateText();
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally
            {
                if ((streamWriter != null))
                {
                    streamWriter.Dispose();
                }
            }
        }

        /// <summary>
        /// Deserializes xml markup from file into an FieldAttributes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FieldAttributes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, out FieldAttributes obj, out System.Exception exception)
        {
            exception = null;
            obj = default(FieldAttributes);
            try
            {
                obj = LoadFromFile(fileName);
                return true;
            }
            catch (System.Exception ex)
            {
                exception = ex;
                return false;
            }
        }

        public static bool LoadFromFile(string fileName, out FieldAttributes obj)
        {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }

        public static FieldAttributes LoadFromFile(string fileName)
        {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try
            {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally
            {
                if ((file != null))
                {
                    file.Dispose();
                }
                if ((sr != null))
                {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }

    public enum FieldAttrType
    {

        /// <remarks/>
        UNKNOWN,

        /// <remarks/>
        ASCII,

        /// <remarks/>
        INTEGER,

        /// <remarks/>
        REAL,

        /// <remarks/>
        FIX,

        /// <remarks/>
        MONEY,

        /// <remarks/>
        DATE,

        /// <remarks/>
        TIME,

        /// <remarks/>
        TIMESTAMP,

        /// <remarks/>
        INTERVAL,
    }
}
